name: Release Build

on:
  workflow_dispatch:
    inputs:
      TOOLCHAINS:
        type: choice
        description: "使用的工具链"
        required: true
        default: "nightly"
        options:
          - "nightly"
          - "stable"
      TARGET:
        type: choice
        description: "编译的目标三元组"
        required: true
        default: "x86_64-pc-windows-msvc"
        options:
          - "x86_64-unknown-linux-gnu"
          - "aarch64-unknown-linux-gnu"
          - "x86_64-pc-windows-msvc"
          - "aarch64-pc-windows-msvc"
          - "aarch64-apple-darwin"
          - "x86_64-apple-darwin"
      TRANSLATION:
        type: boolean
        description: "是否汉化？"
        required: true
        default: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Optimize build performance
  CARGO_INCREMENTAL: 0
  TZ: Asia/Shanghai

jobs:
  # Build strategy check - determine build type based on trigger
  build-check:
    name: Build Strategy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Show Selected Inputs
        run: |
          echo "-----------------------"
          echo "Selected TOOLCHAINS: ${{ github.event.inputs.TOOLCHAINS }}"
          echo "Selected TARGET: ${{ github.event.inputs.TARGET }}"
          echo "Selected TRANSLATION: ${{ github.event.inputs.TRANSLATION }}"
          echo "-----------------------"

  # Build binaries
  build-quick_clipboard:
    name: Build quick_clipboard
    needs: [build-check]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          # Platform builds
          - os: ${{ contains(github.event.inputs.TARGET, 'windows') && 'windows' || (contains(github.event.inputs.TARGET, 'apple') && 'macos' || 'ubuntu') }}-${{ contains(github.event.inputs.TARGET, 'linux') && '24.04' || contains(github.event.inputs.TARGET, 'apple') && 'latest' || contains(github.event.inputs.TARGET, 'aarch64') && '11' || 'latest' }}${{ contains(github.event.inputs.TARGET, 'aarch64') && !contains(github.event.inputs.TARGET, 'apple') && '-arm' || '' }}
            target: ${{ github.event.inputs.TARGET }}
    steps:
      - name: "💾 Checkout repository"
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: "🚀 Setup Rust environment"
        uses: ./.github/actions/setup
        with:
          rust-version: ${{ github.event.inputs.TOOLCHAINS }}
          target: ${{ matrix.target }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "⚙️ Configure Git"
        shell: bash
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: "🔧 Setup TimeZone"
        if: runner.os == 'Linux'
        run: |
          sudo -E rm -rf /etc/localtime
          sudo -E ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: "📥 Download quick_clipboard github project code"
        run: |
          git clone --depth 1 https://github.com/mosheng1/QuickClipboard quick_clipboard

      - name: "🔧 Replace mallocator"
        shell: bash
        run: |
          cd quick_clipboard/src-tauri
          cargo add mimalloc --features override,no_thp,v3 || true          
          curl -L https://github.com/reigadegr/quick_clipboard_action/raw/main/patchs/use_mimalloc.patch -o "use_mimalloc.patch"
          patch -p1 -F 3 < use_mimalloc.patch && git add . && git commit -m "use_mimalloc"

      - name: Install frontend dependencies
        run: |
          cd quick_clipboard
          npm ci

      - name: "⚙️ Reset flags"
        shell: bash
        run: |
          cd quick_clipboard/src-tauri
          rm -rf .cargo/ || echo "无需删除目录"
          mkdir -p .cargo/
          curl -L https://github.com/reigadegr/quick_clipboard_action/raw/main/.cargo/config.toml -o .cargo/config.toml

      - name: "🔨 Build quick_clipboard"
        shell: bash
        run: |
          rm -rf target && echo "删除了target" || echo "无需删除"
          toolchain="${{ github.event.inputs.TOOLCHAINS }}"
          platform="${{ contains(github.event.inputs.TARGET, 'windows') && 'windows' || (contains(github.event.inputs.TARGET, 'apple') && 'apple' || 'linux') }}"
          file="build_"$toolchain"_"$platform".sh"

          url="https://github.com/reigadegr/quick_clipboard_action/raw/main/script/$file"
          echo "脚本直链: $url"
          curl -L $url -o "$file"
          cat "$file"; ls -al

          bin_name="QuickClipboard"
          sh "$file" "${{ matrix.target }}" "$bin_name"

          is_windows="${{ contains(github.event.inputs.TARGET, 'windows') && 'true' || 'false' }}"
          if [ "$is_windows" = "true" ]; then
              bin_name=$bin_name.exe
          fi
          file="$(find target -name "$bin_name")"
          echo "$(realpath $file)"
          mkdir -p ${{ github.event.inputs.TARGET }}_module || echo "已有默认目录"
          dd if=target/"${{ matrix.target }}"/release/$bin_name of=./"${{ matrix.target }}"_module/$bin_name
          git log > ./"${{ matrix.target }}"_module/commits.txt
          cp -af quick_clipboard_last_commit.txt ./"${{ matrix.target }}"_module/quick_clipboard_last_commit.txt || true

      - name: "📤 Upload to GitHub artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.TARGET }}_quick_clipboard
          path: ${{ matrix.target }}_module/*
          retention-days: 3
